{
    "contents" : "\\documentclass[11pt,oneside]{article}\n\n% This package simply sets the margins to be 1 inch.\n\\usepackage[margin=1in]{geometry}\n\n% This package makes code look pretty\n\\usepackage{listings}\n\n% Include Graphics\n\\usepackage{graphicx}\n\\usepackage{subfig}\n\n% Put pictures and tables in their correct place.\n\\usepackage{float}\n\n% used for wrapping text around figures\n\\usepackage{wrapfig}\n\n% Package for creating table\n\\usepackage{multirow}\n\n% This removes page numbers.\n%\\pagenumbering{gobble}\n\n% These packages include nice commands from AMS-LaTeX\n\\usepackage{amssymb,amsmath,amsthm}\n\n% Make the space between lines slightly more\n% generous than normal single spacing, but compensate\n% so that the spacing between rows of matrices still\n% looks normal.  Note that 1.1=1/.9090909...\n\\renewcommand{\\baselinestretch}{1.1}\n\\renewcommand{\\arraystretch}{.91}\n\n% Define an environment for exercises.\n\\newenvironment{exercise}[1]{\\vspace{.5cm}\\noindent\\textbf{#1 \\hspace{.05em}}}{}\n\n% Allow for underlining.\n\\usepackage[normalem]{ulem}\n\\usepackage{multirow}\n\n% define shortcut commands for commonly used symbols\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\C}{\\mathbb{C}}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\\newcommand{\\Q}{\\mathbb{Q}}\n\\newcommand{\\N}{\\mathbb{N}}\n\\newcommand{\\calP}{\\mathcal{P}}\n\n\n\\DeclareMathOperator{\\vsspan}{span}\n\n\n\n\\begin{document}\n\\SweaveOpts{concordance=TRUE}\n\n\\begin{flushright}\nDavid Ebert\\\\\n\\today \\\\\n\\end{flushright}\n\n\\begin{center}\n\\textbf{Tutorial: Connecting R and MySQL} \\\\\n\\end{center}\n\nHere are the steps I used to combine R and MySQL together happily.\n\n\\begin{enumerate}\n\n\\item Get MySQL and the R package RMySQL.\n\n\n\n\\item Create a database in MySQL. Notice that while the syntax for \\texttt{CREATE TABLE} is the same as Oracle, the data types are different. In particular, MySQL uses \\texttt{TINYINT}, \\texttt{SMALLINT}, etc. for integers.\n\n\\begin{verbatim}\n$ mysql -u root -p -h localhost\n\nmysql> CREATE DATABASE shop;\n\nmysql> CREATE TABLE inventory\n        (id SMALLINT PRIMARY KEY, \n        name VARCHAR(50),\n        quantity SMALLINT);\n\nmysql> INSERT INTO inventory VALUES(1, 'Tomato', '10');\nmysql> INSERT INTO inventory VALUES(2, 'Potato', '20');\nmysql> INSERT INTO inventory VALUES(3, 'Rhubarb', '0');\nmysql> INSERT INTO inventory VALUES(4, 'Eggplant', '2');\nmysql> INSERT INTO inventory VALUES(5, 'Brussels Spouts', '15');\nmysql> INSERT INTO inventory VALUES(6, 'Onion', '10');\n\nmysql> SELECT * from inventory;\n\nmysql> DESCRIBE inventory; -- This is a lot like the schema tab in Oracle SQL live\n\\end{verbatim}\n\n\n\n\n\\item Next, we need to create a user with permission to access the database. To do that, I created a new user in MySQL.\\footnote{I'm sure it's possible to skip this step and use root user. But I had trouble with this in R. I guess this workaround is good DBA practice.} \n\n\\begin{verbatim}\n$ mysql -u root -p -h localhost\n\nmysql> CREATE USER 'dangle'@'localhost' IDENTIFIED BY 'dongle'; \nmysql>   -- username is dangle. password is dongle.\nmysql> GRANT ALL PRIVILEGES ON shop.* TO 'francesco'@'localhost';\nmysql> quit;\n\\end{verbatim}\n\n\nWe can now access the database directly through R. But if you want to log in to MySQL as dangle, you would use the following command before entering the password:\n\n\\begin{verbatim}\n$ mysql -u dangle -p -h localhost\n\\end{verbatim}\n\n\n\n\\item We're now ready to use R. First, we need to create a database connection, which we'll name \\texttt{dbcon}:\n\n<<>>=\nlibrary(RMySQL)\ndbcon = dbConnect(MySQL(), user = 'dangle', \n                 password = 'dongle', \n                 dbname = 'shop', \n                 host = '127.0.0.1')\n@\n\n\n\n\\item Now we're ready. First, let's look at the tables in the database, and then the columns in the inventory.\n\n<<>>=\ndbListTables(dbcon)\ndbListFields(dbcon, 'inventory')\n@\n\n\n\\vspace{25 pt}\nNext, let's bring the table data into R. \n\n<<>>=\ninventory_table = dbReadTable(dbcon, \"inventory\")\ninventory_table\n@\n\n\n\\vspace{25 pt}\nWe can go the other way, too. Let's create a new table in R, called \\texttt{employee} and send that table to the \\texttt{shop} database.\n\n<<>>=\nfname = c(\"Alice\", \"Bob\", \"Charlie\", \"Dave\")\nlname = c(\"Alvarez\", \"Brown\", \"Chaplin\", \"Dangle\")\nemployee = data.frame(lname, fname)\nemployee\n\ndbWriteTable(dbcon, \"employee\", \n             employee, \n             overwrite = TRUE, \n             append = FALSE)\n@\n\n\n\\vspace{25 pt}\nFinally, let's send queries to the database from within R. First we send a query to SQL. Then the \\texttt{fetch} command imports the table into R. \n\n<<>>=\nsql_query = dbSendQuery(dbcon, \n                        'SELECT name, quantity \n                        FROM inventory \n                        WHERE quantity > 8')\nsql_query\n\ninventory_table = fetch(sql_query, n=-1)\ninventory_table\n\non.exit(dbDisconnect(dbcon))\n@\n\\end{enumerate}\n\n\\end{document}",
    "created" : 1474060922281.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "872107529",
    "id" : "64108719",
    "lastKnownWriteTime" : 1474066713,
    "path" : "~/Desktop/Documents/GitRepos/RMySQL_setup/RMySQL_setup.Rnw",
    "project_path" : "RMySQL_setup.Rnw",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "sweave"
}